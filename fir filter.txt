module fir_filter(
    input clk,
    input reset,
    input signed [15:0] x_in,
    output reg signed [31:0] y_out
);

parameter N = 5; // Number of filter coefficients

// Example coefficients (simple moving average filter)
reg signed [15:0] h [0:N-1] = '{16'd1, 16'd2, 16'd3, 16'd2, 16'd1};

// Shift register to store input samples
reg signed [15:0] x [0:N-1];

integer i;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        y_out <= 32'd0;
        for (i = 0; i < N; i = i + 1) begin
            x[i] <= 16'd0;
        end
    end else begin
        // Shift samples
        for (i = N-1; i > 0; i = i - 1) begin
            x[i] <= x[i-1];
        end
        x[0] <= x_in;

        // Compute convolution
        y_out <= 32'd0;
        for (i = 0; i < N; i = i + 1) begin
            y_out <= y_out + x[i] * h[i];
        end
    end
end

endmodule
module tb_fir_filter;

    reg clk;
    reg reset;
    reg signed [15:0] x_in;
    wire signed [31:0] y_out;

    fir_filter uut (
        .clk(clk),
        .reset(reset),
        .x_in(x_in),
        .y_out(y_out)
    );

    initial begin
        clk = 0;
        reset = 1;
        x_in = 0;
        #10 reset = 0;

        #10 x_in = 16'd1;
        #10 x_in = 16'd2;
        #10 x_in = 16'd3;
        #10 x_in = 16'd4;
        #10 x_in = 16'd5;
        #10 x_in = 16'd6;
        #10 x_in = 16'd7;
        #10 x_in = 16'd8;
        #10 x_in = 16'd9;
        #10 x_in = 16'd10;
        #10 $stop;
    end

    always #5 clk = ~clk;

endmodule